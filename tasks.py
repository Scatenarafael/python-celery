import logging
import time

from celery_app import app

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler(),  # Para continuar imprimindo no terminal tambÃ©m,
    ],
)

logger = logging.getLogger(__name__)


@app.task(queue="emails")
def send_email(email):
    logger.error("QUEUE EMAIL")
    """Simula o envio de um e-mail."""
    print(f"ðŸ“¨ Enviando e-mail para {email}...")
    time.sleep(2)  # Simula o tempo de envio do e-mail
    return f"E-mail enviado para {email}!"


@app.task(queue="reports")
def generate_report():
    logger.error("QUEUE REPORTS:")
    """Simula a geraÃ§Ã£o de um relatÃ³rio."""
    print("ðŸ“Š Gerando relatÃ³rio...")
    time.sleep(5)  # Simula um processo longo
    return "RelatÃ³rio gerado com sucesso!"


@app.task(queue="backups")
def run_backup():
    logger.error("QUEUE BACKUPS:")
    """Simula a execuÃ§Ã£o de um backup."""
    print("ðŸ’¾ Realizando backup do sistema...")
    time.sleep(7)  # Simula um backup longo
    return "Backup concluÃ­do!"


@app.task
def reverse(text):
    time.sleep(5)
    return text[::-1]
